<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><div id="id0596006969_ordered_collections"><a id="ordered_collections"/><h3 class="docSection1Title">5.2. Ordered Collections</h3><blockquote><p class="docText"><span class="docEmphasis">Oh, right, that's what we were going to tryâ€¦</span><a id="idx-CHP-5-0194"/></p></blockquote><p class="docText">Our first goal is to store the tracks that make up an album, keeping them in the right order. Later we'll add information like the disc on which a track is found, and its position on that disc, so we can gracefully handle multi-disc albums.</p><a id="how_do_i_do_that-id015"/><h4 id="title-ID0EXHAG" class="docSection2Title">5.2.1. How do I do that?</h4><p class="docText">The task of keeping a collection in a particular order is actually straightforward. If that's all we cared about in organizing album tracks, we'd need only tell Hibernate to map a <tt>List</tt> or array. In our <tt>Album</tt> mapping we'd use something like <a class="docLink" href="#simple_ordered_mapping_of_tracks_for_an_">Example 5-2</a>.</p><a id="simple_ordered_mapping_of_tracks_for_an_"/><h5 id="title-ID0EHIAG" class="docExampleTitle">Example 5-2. Simple ordered mapping of tracks for an album</h5><table cellspacing="0" width="*" border="1" cellpadding="5"><tr><td><pre>
&lt;list name="tracks" table="ALBUM_TRACKS"&gt;
  &lt;key column="ALBUM_ID"/&gt;
  &lt;index column="<a id="idx-CHP-5-0195"/>POSITION"/&gt;
  &lt;many-to-many class="com.oreilly.hh.Track" column="TRACK_ID"/&gt;
&lt;/list&gt;
</pre><br/>
</td></tr></table><p class="docText">This is very much like the <tt>set</tt> mappings we've used so far (although it uses a different tag to indicate it's an ordered <tt>list</tt> and therefore maps to a <tt>java.util.List</tt>). But notice that we also need to add an <tt>index</tt> tag to establish the <a id="idx-CHP-5-0196"/>ordering of the list, and we need to add a column to hold the value controlling the <a id="idx-CHP-5-0197"/>ordering in the database. Hibernate will manage the contents of this column for us, and use it to ensure that when we get the list out of the database in the future, its contents will be in the same order in which we stored them. The column is created as an integer, and if possible, it is used as part of a composite key for the table. The mapping in <a class="docLink" href="#simple_ordered_mapping_of_tracks_for_an_">Example 5-2</a>, when used to generate a HSQLDB database schema, produces the table shown in <a class="docLink" href="#our_simple_track_list_realized_as_an_hsq">Example 5-3</a>.<a id="idx-CHP-5-0198"/></p><a id="our_simple_track_list_realized_as_an_hsq"/><h5 id="title-ID0EZJAG" class="docExampleTitle">Example 5-3. Our simple track list realized as an HSQLDB schema</h5><table cellspacing="0" width="*" border="1" cellpadding="5"><tr><td><pre>
[schemaexport] create table ALBUM_TRACKS (
[schemaexport]    ALBUM_ID INTEGER not null,
[schemaexport]    TRACK_ID INTEGER not null,
[schemaexport]    POSITION INTEGER not null,
[schemaexport]    primary key (ALBUM_ID, POSITION)
[schemaexport] )
</pre><br/>
</td></tr></table><p class="docText">It's important to understand why the <tt>POSITION</tt> column is necessary. We need to control the order in which tracks appear in an album, and there aren't any properties of the tracks themselves we can use to keep them sorted in the right order. (Imagine how annoyed you'd be if your jukebox system could only play the tracks of an album in, say, alphabetical order, regardless of the intent of the artists who created it!) The fundamental nature of relational database systems is that you get results in whatever order the system finds convenient, unless you tell it how to sort them. The <tt>POSITION</tt> column gives Hibernate a value under its control that can be used to ensure that our list is always sorted in the order in which we created it. Another way to think about this is that the order of the entries is one of the independent pieces of information we want to keep track of, so Hibernate needs a place to store it.</p><p class="docText">The corollary is also important. If there are values in your data that provide a natural order for traversal, there is no need for you to provide an index column; you don't even have to use a <tt>list</tt>. The <tt>set</tt> and <tt>map</tt> collection mappings can be configured to be sorted in Java by providing a <tt>sort</tt> attribute, or within the database itself by providing a SQL <tt>order-by</tt> attribute.<sup class="docFootnote"><a class="docLink" href="#CHP-5-FNOTE-1">[5-1]</a></sup> In either case, when you iterate over the contents of the collection, you'll get them in the specified order.</p><blockquote><p class="docFootnote"><sup><a id="CHP-5-FNOTE-1">[5-1]</a></sup><a id="The"/> The <tt>order-by</tt> attribute and SQL sorting of <a id="idx-CHP-5-0199"/>collections is only available if you're using Version 1.4 or later of the Java SDK, since it relies on the <tt>LinkedHashSet</tt> or <tt>LinkedHashMap</tt> classes introduced in that release.</p></blockquote><hr style="height: 1px; color: gray; background-color: gray;"/><p><span class="v2"><i><b>Tip:</b></i></span></p><p class="docText">The values in the <tt>POSITION</tt> column will always be the same values you'd use as an argument to the <tt>tracks.get()</tt> method in order to obtain the value at a particular position in the <tt>tracks</tt> list.</p><hr style="height: 1px; color: gray; background-color: gray;"/></div></div></body>
</html>