<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><div id="id0596006969_basic_types"><a id="basic_types"/><h3 class="docSection1Title">A.1. Basic Types</h3><p class="docText">Hibernate's basic types fall into a number of groupings:</p><a id="idx-APP-A-0329"/><a id="idx-APP-A-0330"/><a id="idx-APP-A-0331"/><a id="idx-APP-A-0332"/><a id="idx-APP-A-0333"/><a id="idx-APP-A-0334"/><a id="idx-APP-A-0335"/><a id="idx-APP-A-0336"/><a id="idx-APP-A-0337"/><a id="idx-APP-A-0338"/><a id="idx-APP-A-0339"/><a id="idx-APP-A-0340"/><a id="idx-APP-A-0341"/><a id="idx-APP-A-0342"/><a id="idx-APP-A-0343"/><dl class="docList"><dt><br/><p><span class="docPubcolor"><span class="docEmphasis">Simple numeric and Boolean types</span></span></p></dt><dd><p class="docList">These correspond to the primitive Java types that represent numbers, characters and Boolean values, or their wrapper classes. They get mapped to appropriate SQL column types (based on the SQL dialect in use). They are: <tt>boolean, byte, character, double, float, integer, long, short, true_false</tt>, and <tt>yes_no</tt>. The last two are alternate ways to represent a Boolean value within the database; <tt>true_false</tt> uses the values "T" and "F", while yes_no uses "Y" and "N".<a id="idx-APP-A-0329"/><a id="idx-APP-A-0330"/></p></dd><dt><br/><p><span class="docPubcolor"><span class="docEmphasis">String type</span></span></p></dt><dd><p class="docList">The Hibernate type <tt>string</tt> maps from <tt>java.lang.String</tt> to the appropriate string column type for the SQL dialect (usually <tt>VARCHAR</tt><a id="Oracle"/>, but in Oracle <tt>VARCHAR2</tt> is used).<a id="idx-APP-A-0331"/></p></dd><dt><br/><p><span class="docPubcolor"><span class="docEmphasis">Time types</span></span></p></dt><dd><p class="docList">Hibernate uses <tt>date, time</tt>, and <tt>time stamp</tt>to map from java.util.Date (and <a id="idx-APP-A-0332"/>subclasses) to appropriate SQL types (e.g.,<tt>DATE, TIME, TIMESTAMP</tt>).<a id="idx-APP-A-0333"/><a id="idx-APP-A-0334"/><a id="idx-APP-A-0335"/></p></dd><dt><br/><p><span class="docPubcolor"><span class="docEmphasis">Arbitrary precision numeric</span></span></p></dt><dd><p class="docList">The Hibernate type <tt>big_decimal</tt> provides a mapping between <tt>java.math.BigDecimal</tt> to the appropriate SQL type (usually <tt>NUMERIC</tt>, but Oracle uses <tt>NUMBER</tt>).<a id="idx-APP-A-0336"/></p></dd><dt><br/><p><span class="docPubcolor"><span class="docEmphasis">Localization values</span></span></p></dt><dd><p class="docList">The types <tt>locale, timezone</tt>, and <tt>currency</tt> are stored as strings (<tt>VARCHAR</tt> or <tt>VARCHAR2</tt><a id="the"/> as noted above), and mapped to the <tt>Locale, TimeZone</tt>, and <tt>Currency</tt> classes in the <tt>java.util</tt> package. <tt>Locale</tt> and <tt>Currency</tt> are stored using their ISO codes, while <tt>TimeZone</tt> is stored using its <tt>ID</tt> property.<a id="idx-APP-A-0337"/><a id="idx-APP-A-0338"/><a id="idx-APP-A-0339"/></p></dd><dt><br/><p><span class="docPubcolor"><span class="docEmphasis">Class names</span></span></p></dt><dd><p class="docList">The type <tt>class</tt> maps instances of <tt>java.lang.Class</tt> using their fully qualified names, stored in a string column (<tt>VARCHAR</tt><a id="or"/>, or <tt>VARCHAR2</tt> in Oracle).</p></dd><dt><br/><p><span class="docPubcolor"><span class="docEmphasis">Byte arrays</span></span></p></dt><dd><p class="docList">The type <tt>binary</tt> stores byte arrays in an appropriate SQL <a id="idx-APP-A-0340"/>binary type.</p></dd><dt><br/><p><span class="docPubcolor"><span class="docEmphasis">Any serializable object</span></span></p></dt><dd><p class="docList">The type <tt>serializable</tt> can be used to map any serializable Java object into a SQL binary column. This is the fallback type used when attempting to persistan object that doesn't have a more specific appropriate mapping (and does not implement <tt>PersistentEnum;</tt> see the next section).<a id="idx-APP-A-0341"/></p></dd><dt><br/><p><span class="docPubcolor"><span class="docEmphasis">JDBC large objects</span></span></p></dt><dd><p class="docList">The types <tt>blob</tt> and <tt>clob</tt> provide mappings for the <tt>Blob</tt> and <tt>Clob</tt> classes in the <tt>java.sql</tt> package. Note that there are rather severe restrictions on using these classes. Driver support is rather inconsistent in the first place, and they can't be reused past a single transaction.<a id="idx-APP-A-0342"/><a id="idx-APP-A-0343"/></p></dd></dl></div></div></body>
</html>