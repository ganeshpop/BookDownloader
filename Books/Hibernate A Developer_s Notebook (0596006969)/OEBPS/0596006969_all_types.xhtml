<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><div id="id0596006969_all_types"><a id="all_types"/><h3 class="docSection1Title">A.5. All Types</h3><p class="docText">The following <a id="idx-APP-A-0349"/>table shows each of the type classes in the <tt>net.sf. hibernate.types</tt> package, along with the type name you would use for it in a mapping document, the SQL type used in columns storing mapped values, and any relevant comments about its purpose. In many cases, more detailed discussion can be found earlier. To save space, the "<tt>Type</tt>" which appears at the end of each class name has been removed, except in the case of the <tt>Type</tt> interface implemented by all the others.</p><a id="all_typesd1e8827"/><table cellspacing="0" border="1" width="100%"><colgroup span="4"><col/><col/><col/><col/></colgroup><thead><tr><th scope="col" class="docTableCell thead">Type class</th><th scope="col" class="docTableCell thead">Type name</th><th scope="col" class="docTableCell thead">SQL type</th><th scope="col" class="docTableCell thead">Notes</th></tr></thead><tbody><tr><td class="docTableCell"><tt>Abstract-Component</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Abstract ancestor of <tt>Component, DynaBean</tt>, and <tt>Object</tt> types</td></tr><tr><td class="docTableCell"><tt>Abstract</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Abstract skeleton used by the built-in types</td></tr><tr><td class="docTableCell"><tt>Array</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Maps a Java array as a <tt>Persistent-Collection</tt></td></tr><tr><td class="docTableCell"><tt>Association</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Interface used by all associations between entities</td></tr><tr><td class="docTableCell"><tt>Bag</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Maps collections with bag semantics</td></tr><tr><td class="docTableCell"><tt>BigDecimal</tt></td><td class="docTableCell"><tt>big_decimal</tt></td><td class="docTableCell"><tt>NUMERIC</tt></td><td class="docTableCell">In Oracle, SQL type is <tt>NUMBER</tt></td></tr><tr><td class="docTableCell"><tt>Binary</tt></td><td class="docTableCell"><tt>binary</tt></td><td class="docTableCell"><tt>VARBINARY</tt></td><td class="docTableCell">Basic type for byte arrays</td></tr><tr><td class="docTableCell"><tt>Blob</tt></td><td class="docTableCell"><tt>blob</tt></td><td class="docTableCell"><tt>BLOB</tt></td><td class="docTableCell">Not all drivers support this</td></tr><tr><td class="docTableCell"><tt>Boolean</tt></td><td class="docTableCell"><tt>boolean</tt></td><td class="docTableCell"><tt>BIT</tt></td><td class="docTableCell">A basic type</td></tr><tr><td class="docTableCell"><tt>Byte</tt></td><td class="docTableCell"><tt>byte</tt></td><td class="docTableCell"><tt>TINYINT</tt></td><td class="docTableCell">A basic type</td></tr><tr><td class="docTableCell"><tt>CalendarDate</tt></td><td class="docTableCell"><tt>calendar_ date</tt></td><td class="docTableCell"><tt>DATE</tt></td><td class="docTableCell">A basic type</td></tr><tr><td class="docTableCell"><tt>Calendar</tt></td><td class="docTableCell"><tt>calendar</tt></td><td class="docTableCell"><tt>TIMESTAMP</tt></td><td class="docTableCell">A basic type</td></tr><tr><td class="docTableCell"><tt>CharBoolean</tt></td><td class="docTableCell">N/A</td><td class="docTableCell"><tt>CHAR</tt></td><td class="docTableCell">Abstract skeleton used to implement <tt>yes_no</tt> and <tt>true_false</tt> types</td></tr><tr><td class="docTableCell"><tt>Character</tt></td><td class="docTableCell"><tt>character</tt></td><td class="docTableCell"><tt>CHAR</tt></td><td class="docTableCell">A basic and primitive type</td></tr><tr><td class="docTableCell"><tt>Class</tt></td><td class="docTableCell"><tt>class</tt></td><td class="docTableCell"><tt>VARCHAR</tt> or <tt>VARCHAR2</tt></td><td class="docTableCell">Basic type that stores a class' name</td></tr><tr><td class="docTableCell"><tt>Clob</tt></td><td class="docTableCell"><tt>clob</tt></td><td class="docTableCell"><tt>CLOB</tt></td><td class="docTableCell">Not all drivers support this</td></tr><tr><td class="docTableCell"><tt>Component</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Maps the properties of a contained value class on to a group of columns</td></tr><tr><td class="docTableCell"><tt>Composite-Custom</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Adapts <tt>CompositeUserType</tt><a id="the"/> implementations to the <tt>Type</tt> interface</td></tr><tr><td class="docTableCell"><tt>Currency</tt></td><td class="docTableCell"><tt>currency</tt></td><td class="docTableCell"><tt>VARCHAR</tt> or <tt>VARCHAR2</tt></td><td class="docTableCell">Stores ISO code for a currency</td></tr><tr><td class="docTableCell"><tt>Custom</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Adapts <tt>UserType</tt> implementations to the <tt>Type</tt> interface</td></tr><tr><td class="docTableCell"><tt>Date</tt></td><td class="docTableCell"><tt>date</tt></td><td class="docTableCell"><tt>DATE</tt></td><td class="docTableCell">A basic type</td></tr><tr><td class="docTableCell"><tt>Discriminator</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Marker interface for types that can be used for discriminator properties (to select the right mapped subclass)</td></tr><tr><td class="docTableCell"><tt>Double</tt></td><td class="docTableCell"><tt>double</tt></td><td class="docTableCell"><tt>DOUBLE</tt></td><td class="docTableCell">A basic and primitive type</td></tr><tr><td class="docTableCell"><tt>DynaBean</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Maps Jakarta Commons DynaBeans</td></tr><tr><td class="docTableCell"><tt>Entity</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Represents a reference to another entity</td></tr><tr><td class="docTableCell"><tt>Float</tt></td><td class="docTableCell"><tt>float</tt></td><td class="docTableCell"><tt>FLOAT</tt></td><td class="docTableCell">A basic and primitive type</td></tr><tr><td class="docTableCell"><tt>IdentifierBag</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Supports experimental <tt>idbag</tt>, mapping a Collection with bag semantics</td></tr><tr><td class="docTableCell"><tt>Identifier</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Marker interface for types that store identifiers of entities</td></tr><tr><td class="docTableCell"><tt>Immutable</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Abstract superclass for immutable types; extends <tt>NullableType</tt></td></tr><tr><td class="docTableCell"><tt>Integer</tt></td><td class="docTableCell"><tt>integer</tt></td><td class="docTableCell"><tt>INTEGER</tt></td><td class="docTableCell">A basic and primitive type</td></tr><tr><td class="docTableCell"><tt>List</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Maps a Java <tt>List</tt></td></tr><tr><td class="docTableCell"><tt>Literal</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Marker interface for types that store SQL literals</td></tr><tr><td class="docTableCell"><tt>Locale</tt></td><td class="docTableCell"><tt>locale</tt></td><td class="docTableCell"><tt>VARCHAR</tt> or <tt>VARCHAR2</tt></td><td class="docTableCell">Stores ISO code for a locale</td></tr><tr><td class="docTableCell"><tt>Long</tt></td><td class="docTableCell"><tt>long</tt></td><td class="docTableCell"><tt>LONG</tt></td><td class="docTableCell">A basic and primitive type</td></tr><tr><td class="docTableCell"><tt>ManyToOne</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">An association between entities</td></tr><tr><td class="docTableCell"><tt>Map</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Maps a Java <tt>Map</tt></td></tr><tr><td class="docTableCell"><tt>Mutable</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Abstract superclass for mutable types</td></tr><tr><td class="docTableCell"><tt>Nullable</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell"><a id="be"/>Abstract superclass for simple, one column types that can be <tt>null</tt></td></tr><tr><td class="docTableCell"><tt>Object</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Handles "any" type mappings</td></tr><tr><td class="docTableCell"><tt>OneToOne</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">An association between entities</td></tr><tr><td class="docTableCell"><tt>Persistent-Collection</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Supports persistence of collections and arrays</td></tr><tr><td class="docTableCell"><tt>PersistentEnum</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Maps persistent enumerations</td></tr><tr><td class="docTableCell"><tt>Primitive</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Abstract skeleton for mapping primitive Java types; extends <tt>ImmutableType</tt></td></tr><tr><td class="docTableCell"><tt>Serializable</tt></td><td class="docTableCell"><tt>serializable</tt></td><td class="docTableCell">Binary, depends on SQL dialect</td><td class="docTableCell">Catch-all mapping for serializable classes with no better alternative</td></tr><tr><td class="docTableCell"><tt>Set</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Maps a Java <tt>Set</tt></td></tr><tr><td class="docTableCell"><tt>Short</tt></td><td class="docTableCell"><tt>short</tt></td><td class="docTableCell"><tt>SMALLINT</tt></td><td class="docTableCell">A basic and primitive type</td></tr><tr><td class="docTableCell"><tt>SortedMap</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Sorted extension of <tt>MapType</tt></td></tr><tr><td class="docTableCell"><tt>SortedSet</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Sorted extension of <tt>SetType</tt></td></tr><tr><td class="docTableCell"><tt>String</tt></td><td class="docTableCell"><tt>string</tt></td><td class="docTableCell"><tt>VARCHAR</tt> or <tt>VARCHAR2</tt></td><td class="docTableCell">A basic and primitive type</td></tr><tr><td class="docTableCell"><tt>Time</tt></td><td class="docTableCell"><tt>time</tt></td><td class="docTableCell"><tt>TIME</tt></td><td class="docTableCell">A basic type</td></tr><tr><td class="docTableCell"><tt>TimeZone</tt></td><td class="docTableCell"><tt>timezone</tt></td><td class="docTableCell"><tt>VARCHAR</tt> or <tt>VARCHAR2</tt></td><td class="docTableCell">Stores time zone ID</td></tr><tr><td class="docTableCell"><tt>Timestamp</tt></td><td class="docTableCell"><tt>timestamp</tt></td><td class="docTableCell"><tt>TIMESTAMP</tt></td><td class="docTableCell">A basic type</td></tr><tr><td class="docTableCell"><tt>TrueFalse</tt></td><td class="docTableCell"><tt>true_false</tt></td><td class="docTableCell"><tt>CHAR</tt></td><td class="docTableCell">Stores Booleans as "T" or "F"</td></tr><tr><td class="docTableCell"><tt>Type</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Superinterface of all these types</td></tr><tr><td class="docTableCell"><tt>Version</tt></td><td class="docTableCell">N/A</td><td class="docTableCell">N/A</td><td class="docTableCell">Extends <tt>Type</tt> for version stamping</td></tr><tr><td class="docTableCell"><tt>YesNo</tt></td><td class="docTableCell"><tt>yes_no</tt></td><td class="docTableCell"><tt>CHAR</tt></td><td class="docTableCell">Stores Booleans as "Y" or "N"</td></tr></tbody></table><br/><p class="docText">There is also a <tt>TypeFactory</tt> class which provides assistance in building the right <tt>Type</tt> implementation for a given need, such as when parsing a type name in a mapping document. Reading its source is interesting.</p></div></div></body>
</html>