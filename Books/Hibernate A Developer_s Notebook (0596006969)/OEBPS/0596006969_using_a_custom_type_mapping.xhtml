<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><div id="id0596006969_using_a_custom_type_mapping"><a id="using_a_custom_type_mapping"/><h3 class="docSection1Title">7.2. Using a Custom Type Mapping</h3><p class="docText"><a id="a"/>All right, we've created a <a id="idx-CHP-7-0256"/>custom type persistence handler, and it wasn't so bad! Now it's time to actually use it to persist our enumeration data the way we want it.<a id="idx-CHP-7-0257"/><a id="idx-CHP-7-0258"/></p><a id="how_do_i_do_that-id022"/><h4 id="title-ID0EM1AG" class="docSection2Title">7.1.1. How do I do that?</h4><p class="docText">This is actually almost embarrassingly easy. Once we've got the value class, <tt>SourceMedia</tt>, and the persistence manager, <tt>SourceMediaType</tt>, in place, all we need to do is modify any <a id="idx-CHP-7-0259"/>mapping documents that were previously referring to the raw value type to refer instead to the custom persistence manager.<a id="idx-CHP-7-0260"/><a id="I_indexterm7_d1e6210"/></p><p class="docText">In our case, that means we change the <a id="idx-CHP-7-0261"/>mapping for the <tt>mediaSource</tt> property in <span class="docEmphasis">Track.hbm.xml</span> so it looks like <a class="docLink" href="#custom_type_mapping_for_the_sourcemedia_">Example 7-2</a> rather than <a class="docLink" href="0596006969_working_with_persistent_enumerations.xhtml#adding_the_sourcemedia_property_to_the_t">Example 6-3</a>.</p><blockquote><p class="docText"><span class="docEmphasis">That's it. No, really</span>!.</p></blockquote><a id="custom_type_mapping_for_the_sourcemedia_"/><h5 id="title-ID0EG3AG" class="docExampleTitle">Example 7-2. Custom type mapping for the sourceMedia property</h5><table cellspacing="0" width="*" border="1" cellpadding="5"><tr><td><pre>
&lt;property name="sourceMedia" type="com.oreilly.hh.SourceMediaType"&gt;
  &lt;meta attribute="field-description"&gt;Media on which track was obtained&lt;/meta&gt;
  &lt;meta attribute="use-in-tostring"&gt;true&lt;/meta&gt;
&lt;/property&gt;
</pre><br/>
</td></tr></table><p class="docText">At this point, running <tt><b>ant schema</b></tt> will rebuild the database schema, changing the <tt>SOURCEMEDIA</tt> column in the <tt>TRACK</tt> table from integer to <tt>VARCHAR</tt>(as specified by <tt>SourceMediaType's sqlTypes()</tt> method).<a id="idx-CHP-7-0262"/><a id="idx-CHP-7-0263"/></p><p class="docText">Thanks to the beauty of letting the object/relational <a id="idx-CHP-7-0264"/>mapping layer handle the details of how data is stored and retrieved, we don't need to change any aspect of the example or test code that we were using in <a class="docLink" href="0596006969_persistent_enumerated_types.xhtml#persistent_enumerated_types">Chapter 6</a>. You can run <tt><b>ant ctest</b></tt> to create sample data. It will run with no complaint. If you fire up <tt><b>ant db</b></tt> to look at the way it's stored, you'll find that our goal of storing semantically meaningful enumeration symbols has been achieved, as shown in <a class="docLink" href="#nicer_source_media_information_in_the_tr">Figure 7-1</a>.</p><a id="nicer_source_media_information_in_the_tr"/><p/><div class="center"><h5 class="docFigureTitle">Figure 7-1. Nicer source media information in the TRACK table</h5><a id="I_mediaobject7_d1e6298"/><p class="docText"><img src="Images/0596006969_using_a_custom_type_mapping_image01.png" alt="" width="396" height="245"/></p></div><br/><p class="docText">Getting the data back out works just as well. Running <tt><b>ant qtest</b></tt> produces output that is identical to what we obtained when we were using Hibernate's built-in, numeric enumeration support. Try it yourself, or compare <a class="docLink" href="#you_cant_tell_the_difference_at_the_appl">Example 7-3</a> with <a class="docLink" href="0596006969_working_with_persistent_enumerations.xhtml#human-oriented_display_of_source_media_i">Example 6-5</a>.</p><a id="you_cant_tell_the_difference_at_the_appl"/><h5 id="title-ID0EY5AG" class="docExampleTitle">Example 7-3. You can't tell the difference at the application layer</h5><table cellspacing="0" width="*" border="1" cellpadding="5"><tr><td><pre>
...
qtest:
     [java] Track: "Russian Trance" (PPK) 00:03:30, from Compact Disc
     [java] Track: "Video Killed the Radio Star" (The Buggles) 00:03:49, from VHS
Videocassette Tape
     [java] Track: "Gravity's Angel" (Laurie Anderson) 00:06:06, from Compact Disc
     [java] Track: "Adagio for Strings (Ferry Corsten Remix)" (Ferry Corsten,
William Orbit, Samuel Barber) 00:06:35, from Compact Disc
     [java] Track: "Test Tone 1" 00:00:10
     [java]   Comment: Pink noise to test equalization
...
</pre><br/>
</td></tr></table><blockquote><p class="docText"><span class="docEmphasis">Encapsulation and abstraction are wonderful things, aren't they?</span></p></blockquote><a id="what_abouthellip-id009"/><h4 id="title-ID0EB6AG" class="docSection2Title">7.2.1. What about…</h4><p class="docText">…More complicated <a id="idx-CHP-7-0265"/>custom type <a id="idx-CHP-7-0266"/>mappings, such as splitting single properties into multiple database columns, or single columns into multiple properties? As noted earlier, your persistence handler class needs to implement <tt>CompositeUserType</tt> instead of <tt>UserType</tt> to provide this service. That interface adds only a few more methods for you to flesh out, and they deal primarily with teaching Hibernate about the synthetic properties you want to make available in queries, and providing ways for it to get and set the values of these properties. Let's look at an example!<a id="idx-CHP-7-0267"/></p></div></div></body>
</html>