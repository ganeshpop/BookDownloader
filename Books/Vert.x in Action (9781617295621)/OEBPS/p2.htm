<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}</style></head>
<body><div id="sbo-rt-content" class="calibre"><div class="tocheadb">
    <h1 class="tochead" id="heading_id_2"><a id="pgfId-1024862"/><a id="pgfId-1024853"/>Part 2. Developing reactive services with Vert.x</h1>
  </div>

  <p class="body"><a id="pgfId-1024895"/><span class="fm-part-initial-cap">C</span>ongratulations, you are now familiar with asynchronous programming with Vert.x and its core APIs! It’s now time to dive into the main pieces of the Vert.x stack and to explore the modules for building advanced HTTP APIs and using databases, authentication, messaging, and more.</p>

  <p class="body"><a id="pgfId-1024896"/>We will develop a reactive application on top of multiple event-driven microservices across these chapters. Chapter 12 is where we will make reactive a reality: we wrote scalable services in the previous chapters, but we also need to make the application resilient and responsive even when failures happen. You will be exposed to a methodology that uses load and chaos testing to observe how services behave, and we will discuss different failure mitigation strategies.</p>

  <p class="body"><a id="pgfId-1024888"/>Last but not least, we will conclude the book by deploying to containers and Kubernetes clusters.</p>

  <p class="fm-copyright"> </p>
</div></body>
</html>