<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}</style></head>
<body><div id="sbo-rt-content" class="calibre"><div class="tocheadb">
    <h1 class="tochead" id="heading_id_2"><a id="pgfId-1059358"/><a id="pgfId-998407"/>Part 1. Fundamentals of asynchronous programming with Vert.x</h1>
  </div>

  <p class="body"><a id="pgfId-1059404"/><span class="fm-part-initial-cap">T</span>he first step toward building reactive systems is to adopt <i class="fm-italics">asynchronous programming</i>. Traditional programming models based on blocking I/O do not scale as well as those that use non-blocking I/O. Serving more requests with fewer resources is very appealing, so where’s the catch? There is indeed a <i class="fm-italics">little</i> problem: asynchronous programming is a non-trivial paradigm shift if you have never been exposed to it!</p>

  <p class="body"><a id="pgfId-1059397"/>The chapters in this part of the book will teach you the fundamental concepts of asynchronous programming by using the Vert.x toolkit. Thinking in asynchronous operations is definitely approachable (and fun!) with Vert.x, and we will explore the main building blocks of a Vert.x application.</p>

  <p class="fm-copyright"> </p>
</div></body>
</html>