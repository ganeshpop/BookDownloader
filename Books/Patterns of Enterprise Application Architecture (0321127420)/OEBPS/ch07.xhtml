<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><h2 id="ch07"><span epub:type="pagebreak" id="page_87"/>Chapter 7. Distribution Strategies</h2>&#13;
<p class="noindent">Objects have been around for a while, and sometimes it seems that, ever since they were created, folks have wanted to distribute them. However, distribution of objects, or indeed of anything else, has a lot more pitfalls than many people realize [<a href="bib01.xhtml#biblio39">Waldo et al</a>.], especially when they’re under the influence of vendors’ cozy brochures. This chapter is about some of these hard lessons—lessons I’ve seen many of my clients learn the hard way.</p>&#13;
<h3 id="ch07lev1sec1">The Allure of Distributed Objects</h3>&#13;
<p class="noindent">There is a recurring presentation that I used to see two or three times a year during design reviews. Proudly the system architect of a new OO system lays out his plan for a new distributed object system—let’s pretend it’s a some kind of ordering system. He shows me a design that looks rather like <a href="#ch07fig01">Figure 7.1</a>. With separate remote objects for customers, orders, products, and deliveries. Each one is a separate component that can be placed on a separate processing node.</p>&#13;
<div class="image"><a id="ch07fig01"/><img src="Images/07fig01.jpg" alt="Image" width="600" height="374"/></div>&#13;
<p class="fig-caption">Figure 7.1. Distributing an application by putting different components on different nodes (not recommended!)</p>&#13;
<p class="indent">I ask, “Why do you do this?”</p>&#13;
<p class="indent">“Performance, of course,” the architect replies, looking at me a little oddly. “We can run each component on a separate box. If one component gets too busy we add extra boxes for it so we can load-balance our application.” The look is now curious as if he wonders if I really know anything about real distributed object stuff at all.</p>&#13;
<p class="indent">Meanwhile I’m faced with an interesting dilemma. Do I just say out and out that this design sucks like an inverted hurricane and get shown the door immediately? Or do I slowly try to show my client the light? The latter is more remunerative but much tougher since the client is usually very pleased with his architecture, and it takes a lot to give up on a fond dream.</p>&#13;
<p class="indent">So assuming you haven’t shown this book the door I guess you’ll want to know why this distributed architecture sucks. After all, many tool vendors will <span epub:type="pagebreak" id="page_88"/>tell you that the whole point of distributed objects is that you can take a bunch of objects and position them as you like on processing nodes. Also, their powerful middleware provides transparency. Transparency allows objects to call each other within a process or between a process without having to know if the callee is in the same process, in another process, or on another machine.</p>&#13;
<p class="indent">Transparency is valuable, but while many things can be made transparent in distributed objects, performance isn’t usually one of them. Although our prototypical architect was distributing objects the way he was for performance reasons, in fact his design will usually cripple performance, make the system much harder to build and deploy, or, usually, do both.</p>&#13;
<h3 id="ch07lev1sec2">Remote and Local Interfaces</h3>&#13;
<p class="noindent">The primary reason that the distribution by class model doesn’t work has to do with a fundamental fact of computers. A procedure call within a process is very, very fast. A procedure call between two separate processes is orders of magnitude slower. Make that a process running on another machine and you can add another order of magnitude or two, depending on the network topography involved.</p>&#13;
<p class="indent"><span epub:type="pagebreak" id="page_89"/>As a result, the interface for an object to be used remotely must be different from that for an object used locally within the same process.</p>&#13;
<p class="indent">A local interface is best as a fine-grained interface. Thus, if I have an address class, a good interface will have separate methods for getting the city, getting the state, setting the city, setting the state, and so forth. A fine-grained interface is good because it follows the general OO principle of lots of little pieces that can be combined and overridden in various ways to extend the design into the future.</p>&#13;
<p class="indent">A fine-grained interface doesn’t work well when it’s remote. When method calls are slow, you want to obtain or update the city, state, and zip in one call rather than three. The resulting interface is coarse-grained, designed not for flexibility and extendibility but for minimizing calls. Here you’ll see an interface along the lines of get-address details and update-address details. It’s much more awkward to program to, but for performance you need to have it.</p>&#13;
<p class="indent">Of course, what vendors will tell you is that there’s no overhead to using their middleware for remote and local calls. If it’s a local call, it’s done with the speed of a local call. If it’s a remote call it’s done more slowly. Thus, you only pay the price of a remote call when you need one. This much is, to some extent, true, but it doesn’t avoid the essential point that any object that may be used remotely should have a coarse-grained interface while every object that isn’t used remotely should have a fine-grained interface. Whenever two objects communicate you have to choose which to use. If the object could ever be in separate processes you have to use the coarse-grained interface and pay the cost of the harder programming model. Obviously, it only makes sense to pay that cost when you need to, and so you need to minimize the amount of inter-process collaborations.</p>&#13;
<p class="indent">For these reasons you can’t just take a group of classes that you design in the world of a single process, throw CORBA or some such at them, and come up with a distributed model. Distribution design is more than that. If you base your distribution strategy on a classes, you’ll end up with a system that does a lot of remote calls and thus needs awkward coarse-grained interfaces. In the end, even with coarse-grained interfaces on every remotable class, you’ll still end up with too many remote calls and a system that’s awkward to modify as a bonus.</p>&#13;
<p class="indent">Hence, we get to my <strong>First Law of Distributed Object Design:</strong> Don’t distribute your objects!</p>&#13;
<p class="indent">How, then, do you effectively use multiple processors? In most cases the way to go is clustering (see <a href="#ch07fig02">Figure 7.2</a>). Put all the classes into a single process and then run multiple copies of that process on the various nodes. That way each process uses local calls to get the job done and thus does things faster. You can <span epub:type="pagebreak" id="page_90"/>also use fine-grained interfaces for all the classes within the process and thus get better maintainability with a simpler programming model.</p>&#13;
<div class="image"><a id="ch07fig02"/><img src="Images/07fig02.jpg" alt="Image" width="600" height="374"/></div>&#13;
<p class="fig-caption">Figure 7.2. Clustering involves putting several copies of the same application on different nodes.</p>&#13;
<h3 id="ch07lev1sec3">Where You Have to Distribute</h3>&#13;
<p class="noindentbot">So you want to minimize distribution boundaries and utilize your nodes through clustering as much as possible. The rub is that there are limits to that approach—that is, places where you need to separate the processes. If you’re sensible, you’ll fight like a cornered rat to eliminate as many of them as you can, but you won’t eliminate them all.</p>&#13;
<p class="bullet">• One obvious separation is between the traditional clients and servers of business software. PCs on users’ desktops are different nodes to shared repositories of data. Since they’re different machines you need separate processes that communicate. The client–server divide is a typical inter-process divide.</p>&#13;
<p class="bullet">• A second divide often occurs between server-based application software (the application server) and the database. Of course, you don’t have to do this. You can run all your application software in the database process itself <span epub:type="pagebreak" id="page_91"/>using such things as stored procedures. But often that’s not so practical, so you have to have separate processes. They may run on the same machine, but once you have separate processes you immediately have to pay most of the costs in remote calls. Fortunately, SQL is designed as a remote interface, so you can usually arrange things to minimize that cost.</p>&#13;
<p class="bullet">• Another separation in process may occur in a Web system between the Web server and the application server. All things being equal it’s best to run the Web and application servers in a single process, but all things aren’t always equal.</p>&#13;
<p class="bullet">• You may have to separate because of vendor differences. If you’re using a software package, it will often run in its own process, so again you’re distributing. At least a good package will have a coarse-grained interface.</p>&#13;
<p class="bulletbot">• And finally there may be some genuine reason that you have to split your application server software. You should sell any grandparent you can get your hands on to avoid this, but cases do come up. Then you just have to hold your nose and divide your software into remote, coarse-grained components.</p>&#13;
<p class="indent">The overriding theme, in Colleen Roe’s memorable phrase, is to be “parsimonious with object distribution.” Sell your favorite grandma first if you possibly can.</p>&#13;
<h3 id="ch07lev1sec4">Working with the Distribution Boundary</h3>&#13;
<p class="noindent">As you design your system you need to limit your distribution boundaries as much as possible, but where you have them you need to take them into account. Every remote call travels on the cyber equivalent of a horse and carriage. All sorts of places in the system will change shape to minimize remote calls. That’s pretty much the expected price.</p>&#13;
<p class="indent">However, you can still design within a single process using fine-grained objects. The key is to use them internally and place coarse-grained objects at the distribution boundaries, whose sole role is to provide a remote interface to the fine-grained objects. The coarse-grained objects don’t really do anything but delegate so they act as a facade for the fine-grained objects. This facade is there only for distribution purposes—hence the name <em><a href="ch15.xhtml#ch15lev1sec1">Remote Facade</a> (<a href="ch15.xhtml#page_388">388</a>).</em></p>&#13;
<p class="indent">Using a <em><a href="ch15.xhtml#ch15lev1sec1">Remote Facade</a> (<a href="ch15.xhtml#page_388">388</a>)</em> helps minimize the difficulties that the coarse-grained interface introduces. This way only the objects that really need a remote service get the coarse-grained method, and it’s <span epub:type="pagebreak" id="page_92"/>obvious to the developers that they’re paying that cost. Transparency has its virtues, but you don’t want to be transparent about a potential remote call.</p>&#13;
<p class="indent">By keeping the coarse-grained interfaces as mere facades, however, you allow people to use the fine-grained objects whenever they know they are running in the same process. This makes the whole distribution policy much more explicit. Hand in hand with <em><a href="ch15.xhtml#ch15lev1sec1">Remote Facade</a> (<a href="ch15.xhtml#page_388">388</a>)</em> is <em><a href="ch15.xhtml#ch15lev1sec2">Data Transfer Object</a> (<a href="ch15.xhtml#page_401">401</a>).</em> Not only do you need coarse-grained methods, you also need to transfer coarse-grained objects. When you ask for an address, you need to send that information in one block. You usually can’t send the domain object itself, because it’s tied in a Web of fine-grained local inter-object references. So you take all the data that the client needs and bundle it in a particular object for the transfer—hence the term <em><a href="ch15.xhtml#ch15lev1sec2">Data Transfer Object</a> (<a href="ch15.xhtml#page_401">401</a>).</em> (Many people in the enterprise Java community use the term <em>value object</em> for this, but this causes a clash with other meanings of the term <em><a href="ch18.xhtml#ch18lev1sec6">Value Object</a> (<a href="ch18.xhtml#page_486">486</a>)</em>). The <em><a href="ch15.xhtml#ch15lev1sec2">Data Transfer Object</a> (<a href="ch15.xhtml#page_401">401</a>)</em> appears on both sides of the wire, so it’s important that it not reference anything that isn’t shared over the wire. This boils down to the fact that a <em><a href="ch15.xhtml#ch15lev1sec2">Data Transfer Object</a> (<a href="ch15.xhtml#page_401">401</a>)</em> usually only references other <em><a href="ch15.xhtml#ch15lev1sec2">Data Transfer Objects</a> (<a href="ch15.xhtml#page_401">401</a>)</em> and fundamental objects such as strings.</p>&#13;
<p class="indent">Another route to distribution is to have a broker that migrates objects between processes. The idea here is to use a <em><a href="ch11.xhtml#ch11lev1sec3">Lazy Load</a> (<a href="ch11.xhtml#page_200">200</a>)</em> scheme where, instead of lazy reading from a database, you move objects across the wire. The hard part of this is ensuring that you don’t end up with lots of remote calls. I haven’t seen anyone try this in an application, but some O/R mapping tools (e.g., TOPLink) have this facility, and I’ve heard some good reports about it.</p>&#13;
<h3 id="ch07lev1sec5">Interfaces for Distribution</h3>&#13;
<p class="noindent">Traditionally the interfaces for distributed components have been based on remote procedure calls, either with global procedures or as methods on objects. In the last couple of years, however, we’ve begun to see interfaces based on XML over HTTP. SOAP is probably going to be the most common form of this interface, but many people have experimented with it for some years.</p>&#13;
<p class="indent">XML-based HTTP communication is handy for several reasons. It easily allows a lot of data to be sent, in structured form, in a single roundtrip. Since remote calls need to be minimized, that’s a good thing. The fact that XML is a common format with parsers available in many platforms allows systems built on very different platforms to communicate, as does the fact that HTTP is pretty universal these days. The fact that XML is textual makes it easy to see <span epub:type="pagebreak" id="page_93"/>what’s going across the wire. HTTP is also easy to get through firewalls when security and political reasons often make it difficult to open up other ports.</p>&#13;
<p class="indent">Even so, an object-oriented interface of classes and methods has value too. Moving all the transferred data into XML structures and strings can add a considerable burden to the remote call. Certainly applications have seen a significant performance improvement by replacing an XML-based interface with a remote call. If both sides of the wire use the same binary mechanism, an XML interface doesn’t buy you much other than a jazzier set of acronyms. If you have two systems built with the same platform, then you’re better off using the remote call mechanism built into that platform. Web services become handy when you want different platforms to talk to each other. My attitude is to use XML Web services only when a more direct approach isn’t possible.</p>&#13;
<p class="indent">Of course, you can have the best of both worlds by layering an HTTP interface over an object-oriented interface. All calls to the Web server are translated by it into calls on an underlying object-oriented interface. To an extent this gives you the best of both worlds, but it does add complexity since you’ll need both the Web server and the machinery for a remote OO interface. Therefore, you should only do this if you need an HTTP as well as a remote OO API or if the facilities of the remote OO API for security and transaction handling make it easier to deal with these issues than using non-remote objects.</p>&#13;
<p class="indent">In my discussions here I’ve assumed a synchronous, RPC-based interface. However, although that’s what I’ve described, I actually don’t think it’s always the best way of handling a distributed system. Increasingly, my preference is for a message-based approach that’s inherently asynchronous. Digging into patterns for message-based work is a sizable topic on its own, and that’s why I ducked out of it for this book. I hope such a book will appear in the near future, but for the moment all I can do is urge you to look at asynchronous, message-based approaches. In particular I think they’re the best use of Web services, even though most of the examples published so far are synchronous.</p>&#13;
</div></body>
</html>