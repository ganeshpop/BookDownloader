<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><h2 id="ch04"><span epub:type="pagebreak" id="page_55"/>Chapter 4. Web Presentation</h2>&#13;
<p class="noindent">One of the biggest changes to enterprise applications in the last few years has been the rise of Web-browser-based user interfaces. They bring with them a lot of advantages: no client software to install, a common UI approach, and easy universal access. Also, many environments make it easy to build a Web app.</p>&#13;
<p class="indent">Preparing a Web app begins with the server software itself. Usually this has some form of configuration file that indicates which URLs are to be handled by which programs. Often a single Web server can handle many kinds of programs. These programs may be dynamic and can be added to a server by placing them in an appropriate directory. The Web server’s job is to interpret the URL of a request and hand over control to a Web server program. There are two main forms of structuring a program in a Web server: as a script or as a server page.</p>&#13;
<p class="indent">The script form is a program, usually with functions or methods to handle the HTTP call. Examples include CGI scripts and Java servlets. The program text can do pretty much anything a program can do, and the script can be broken down into subroutines, and can create and use other services. It gets data from the Web page by examining the HTTP request object, which is a string. In some environments it does this by regular expression searching of the request string—Perl’s ease of doing this makes it a popular choice for CGI scripts. Other platforms, such as Java servlets, do this parsing for the programmer, which allows the programmer to access the information from the request through a keyword interface. This at least means less regular expressions to mess with. The output of the Web server is another string—the response—which the script can write to using the usual write stream operations in the language.</p>&#13;
<p class="indent">Writing an HTML response through stream commands is uncomfortable for programmers, and nearly impossible for nonprogrammers, who would otherwise be comfortable preparing HTML pages. This has led to the idea of server pages, where the program is structured around the returning text page. You write the return page in HTML and insert into the HTML scriptlets of code to execute at certain points. Examples of this approach include PHP, ASP, and JSP.</p>&#13;
<p class="indent"><span epub:type="pagebreak" id="page_56"/>The server page approach works well when there’s little processing of the response, such as “Show me the details of album # 1234.” Things get a lot more messy when you have to make decisions based on the input, such as different display formats for classical and jazz albums.</p>&#13;
<p class="indent">Because the script style works best for interpreting the request and the server page style works best for formatting a response, there’s the obvious option to use a script for request interpretation and a server page for response formatting. This separation is in fact an old idea that first surfaced in user interfaces with the pattern <em><a href="ch14.xhtml#ch14lev1sec1">Model View Controller</a> (<a href="ch14.xhtml#page_330">330</a>).</em> Combine it with the essential notion that nonpresentation logic should be factored out and we have a very good fit for the concepts of this pattern.</p>&#13;
<p class="indent"><em><a href="ch14.xhtml#ch14lev1sec1">Model View Controller</a> (<a href="ch14.xhtml#page_330">330</a>)</em> (see <a href="#ch04fig01">Figure 4.1</a>) is a widely referenced pattern but one that’s often misunderstood. Indeed, before Web apps appeared on the scene, most presentations of <em><a href="ch14.xhtml#ch14lev1sec1">Model View Controller</a> (<a href="ch14.xhtml#page_330">330</a>)</em> I sat through would get it wrong. A main reason for the confusion was the use of the word “controller.” Controller is used in a number of different contexts, and I’ve usually found it used in a different way to that described in <em><a href="ch14.xhtml#ch14lev1sec1">Model View Controller</a> (<a href="ch14.xhtml#page_330">330</a>)</em>. As a result I prefer to use the term <strong>input controller</strong> for the controller in <em><a href="ch14.xhtml#ch14lev1sec1">Model View Controller</a> (<a href="ch14.xhtml#page_330">330</a>).</em></p>&#13;
<div class="image"><span epub:type="pagebreak" id="page_57"/><a id="ch04fig01"/><img src="Images/04fig01.jpg" alt="Image" width="950" height="599"/></div>&#13;
<p class="fig-caption">Figure 4.1. A broad-brush picture of how the model, view, and input controller roles work together in a Web server. The controller handles the request, gets the model to do the domain logic, and then gets the view to create a response based on the model.</p>&#13;
<p class="indent">A request comes in to an input controller, which pulls information off the request. It then forwards the business logic to an appropriate model object. The model object talks to the data source and does everything indicated by the request as well as gather information for the response. When it’s done it returns control to the input controller, which looks at the results and decides which view is needed to display the response. It then passes control, together with the response data, to the view. The input controller’s handoff to the view often isn’t always a straight call but often involves forwarding with the data placed in an agreed place on some form of HTTP session object that’s shared between the input controller and the view.</p>&#13;
<p class="indent">The first, and most important, reason for applying <em><a href="ch14.xhtml#ch14lev1sec1">Model View Controller</a> (<a href="ch14.xhtml#page_330">330</a>)</em> is to ensure that the models are completely separated from the Web presentation. This makes it easier to modify the presentation as well as easier to add additional presentations later. Putting the processing into separate <em><a href="ch09.xhtml#ch09lev1sec1">Transaction Script</a> (<a href="ch09.xhtml#page_110">110</a>)</em> or <em><a href="ch09.xhtml#ch09lev1sec2">Domain Model</a> (<a href="ch09.xhtml#page_116">116</a>)</em> objects will make it easier to test them as well. This is particularly important if you’re using a server page as your view.</p>&#13;
<p class="indent">At this point we come to a second use of the word “controller.” A lot of user-interface designs separate the presentation objects from the domain objects with an intermediate layer of <em><a href="ch14.xhtml#ch14lev1sec7">Application Controller</a> (<a href="ch14.xhtml#page_379">379</a>)</em> objects. The purpose of an <em><a href="ch14.xhtml#ch14lev1sec7">Application Controller</a> (<a href="ch14.xhtml#page_379">379</a>)</em> is to handle the flow of an application, <span epub:type="pagebreak" id="page_58"/>deciding which screens should appear in which order. It may appear as part of the presentation layer, or you can think of it as a separate layer that mediates between the presentation and domain layers. <em><a href="ch14.xhtml#ch14lev1sec7">Application Controllers</a> (<a href="ch14.xhtml#page_379">379</a>)</em> may be written to be independent of any particular presentation, in which case they can be reused between presentations. This works well if you have different presentations with the same basic flow and navigation, although often it’s best to give different presentations a different flow.</p>&#13;
<p class="indent">Not all systems need an <em><a href="ch14.xhtml#ch14lev1sec7">Application Controller</a> (<a href="ch14.xhtml#page_379">379</a>).</em> They’re useful if your system has a lot of logic about the order of screens and the navigation between them. They’re also useful if you haven’t got a simple mapping between your pages and the actions on the domain. But if someone can pretty much see any screen in any order, you’ll probably have little need for an <em><a href="ch14.xhtml#ch14lev1sec7">Application Controller</a> (<a href="ch14.xhtml#page_379">379</a>).</em> A good test is this: If the machine is in control of the screen flow, you need an <em><a href="ch14.xhtml#ch14lev1sec7">Application Controller</a> (<a href="ch14.xhtml#page_379">379</a>);</em> if the user is in control, you don’t.</p>&#13;
<h3 id="ch04lev1sec1">View Patterns</h3>&#13;
<p class="noindent">On the view side there are three patterns to think about: <em><a href="ch14.xhtml#ch14lev1sec5">Transform View</a> (<a href="ch14.xhtml#page_361">361</a>),</em> <em><a href="ch14.xhtml#ch14lev1sec4">Template View</a> (<a href="ch14.xhtml#page_350">350</a>),</em> and <em><a href="ch14.xhtml#ch14lev1sec6">Two Step View</a> (<a href="ch14.xhtml#page_365">365</a>).</em> These give rise to essentially two choices: whether to use <em><a href="ch14.xhtml#ch14lev1sec5">Transform View</a> (<a href="ch14.xhtml#page_361">361</a>)</em> or <em><a href="ch14.xhtml#ch14lev1sec4">Template View</a> (<a href="ch14.xhtml#page_350">350</a>),</em> and whether either of them uses one stage or a <em><a href="ch14.xhtml#ch14lev1sec6">Two Step View</a> (<a href="ch14.xhtml#page_365">365</a>).</em> The basic patterns for <em><a href="ch14.xhtml#ch14lev1sec5">Transform View</a> (<a href="ch14.xhtml#page_361">361</a>)</em> and <em><a href="ch14.xhtml#ch14lev1sec4">Template View</a> (<a href="ch14.xhtml#page_350">350</a>)</em> are single stage. <em><a href="ch14.xhtml#ch14lev1sec6">Two Step View</a> (<a href="ch14.xhtml#page_365">365</a>)</em> is a variation you can apply to either.</p>&#13;
<p class="indent">I’ll start with the choice between <em><a href="ch14.xhtml#ch14lev1sec4">Template View</a> (<a href="ch14.xhtml#page_350">350</a>)</em> and <em><a href="ch14.xhtml#ch14lev1sec5">Transform View</a> (<a href="ch14.xhtml#page_361">361</a>).</em> <em><a href="ch14.xhtml#ch14lev1sec4">Template View</a> (<a href="ch14.xhtml#page_350">350</a>)</em> allows you write the presentation in the structure of the page and embed markers into the page to indicate where dynamic content needs to go. Quite a few popular platforms are based on this pattern, many of which are the server pages technologies (ASP, JSP, PHP) that allow you to put a full programming language into the page. This clearly provides a lot of power and flexibility; sadly, it also leads to very messy code that’s difficult to maintain. As a result if you use server page technology you must be very disciplined to keep programming logic out of the page structure, often by using a helper object.</p>&#13;
<p class="indent">The <em><a href="ch14.xhtml#ch14lev1sec5">Transform View</a> (<a href="ch14.xhtml#page_361">361</a>)</em> uses a transform style of program. The usual example is XSLT. This can be very effective if you’re working with domain data that’s in XML format or can easily be converted to it. An input controller picks the appropriate XSLT stylesheet and applies it to XML gleaned from the model.</p>&#13;
<p class="indent"><span epub:type="pagebreak" id="page_59"/>If you use procedural scripts as your view, you can write the code in the style of either <em><a href="ch14.xhtml#ch14lev1sec5">Transform View</a> (<a href="ch14.xhtml#page_361">361</a>)</em> or <em><a href="ch14.xhtml#ch14lev1sec4">Template View</a> (<a href="ch14.xhtml#page_350">350</a>)</em> or in some interesting mix of the two. I’ve noticed that most scripts follow one of these two patterns as their main form.</p>&#13;
<p class="indent">The second decision is whether to be single stage (see <a href="#ch04fig02">Figure 4.2</a>) or to use <em><a href="ch14.xhtml#ch14lev1sec6">Two Step View</a> (<a href="ch14.xhtml#page_365">365</a>).</em> A single-stage view mostly has one view component for each screen in the application. The view takes domain oriented data and renders it in HTML. I say “mostly” because similar logical screens may share views. Even so, most of the time you can think of it as one view per screen.</p>&#13;
<div class="image"><a id="ch04fig02"/><img src="Images/04fig02.jpg" alt="Image" width="398" height="351"/></div>&#13;
<p class="fig-caption">Figure 4.2. A single-stage view.</p>&#13;
<p class="indent">A two-stage view (<a href="#ch04fig03">Figure 4.3</a>) breaks this process into two stages, producing a logical screen from the domain data and then rendering it in HTML. There’s one first-stage view for each screen but only one second-stage view for the whole application.</p>&#13;
<div class="image"><span epub:type="pagebreak" id="page_60"/><a id="ch04fig03"/><img src="Images/04fig03.jpg" alt="Image" width="500" height="575"/></div>&#13;
<p class="fig-caption">Figure 4.3. A two-stage view.</p>&#13;
<p class="indent">The advantage of the <em><a href="ch14.xhtml#ch14lev1sec6">Two Step View</a> (<a href="ch14.xhtml#page_365">365</a>)</em> is that it puts the decision of what HTML to use in a single place. This makes global changes to the HTML easy since there’s only one object to alter in order to alter every screen on the site. Of course, you only get that advantage if your logical presentation stays the same, so it works best with sites where different screens use the same basic layout. Highly design intensive sites won’t be able to come up with a good logical screen structure.</p>&#13;
<p class="indent"><em><a href="ch14.xhtml#ch14lev1sec6">Two Step View</a> (<a href="ch14.xhtml#page_365">365</a>)</em> works even better if you have a Web application where its services are being used by multiple front-end customers, such as multiple airlines fronting the same basic reservation system. Within the limits of the logical screen, each front end can have a different appearance by using a different second stage. In a similar way you can use a <em><a href="ch14.xhtml#ch14lev1sec6">Two Step View</a> (<a href="ch14.xhtml#page_365">365</a>)</em> to handle different output devices, with separate second stages for a regular Web browser and for a palmtop. Again, the limitation is that you can have the two share a common logical screen, which may not be possible if the UIs are very different, such as in a browser and a cell phone.</p>&#13;
<h3 id="ch04lev1sec2"><span epub:type="pagebreak" id="page_61"/>Input Controller Patterns</h3>&#13;
<p class="noindent">There are two patterns for the input controller. The most common is an input controller object for every page on your Web site. In the simplest case this <em><a href="ch14.xhtml#ch14lev1sec2">Page Controller</a> (<a href="ch14.xhtml#page_333">333</a>)</em> can be a server page itself, combining the roles of view and input controller. In many implementations it makes things easier to split the input controller into a separate object. The input controller can then create appropriate models to do the processing and instantiate a view to return the result. Often you’ll find that there isn’t quite a one-to-one relationship between <em><a href="ch14.xhtml#ch14lev1sec2">Page Controllers</a> (<a href="ch14.xhtml#page_333">333</a>)</em> and views. A more precise thought is that you have a <em><a href="ch14.xhtml#ch14lev1sec2">Page Controller</a> (<a href="ch14.xhtml#page_333">333</a>)</em> for each action, where an action is a button or link. Most of the time the actions correspond to pages, but occasionally they don’t—such as a link that may go to a couple of different pages depending some condition.</p>&#13;
<p class="indent">With any input controller there are two responsibilities—handling the HTTP request and deciding what to do with it—and it often makes sense to separate them. A server page can handle the request, delegating a separate helper object to decide what to do with it. <em><a href="ch14.xhtml#ch14lev1sec3">Front Controller</a> (<a href="ch14.xhtml#page_344">344</a>)</em> goes further in this separation by having only one object handling all requests. This single handler interprets the URL to figure out what kind of request it’s dealing with and creates a separate object to process it. In this way you can centralize all HTTP handling within a single object, avoiding the need to reconfigure the Web server whenever you change the action structure of the site.</p>&#13;
<h3 id="ch04lev1sec3">Further Reading</h3>&#13;
<p class="noindent">Most books on Web server technologies provide a chapter or two on good server designs, although these are often buried in the technological descriptions. An excellent discussion of Java Web design is <a href="ch09.xhtml#ch09">Chapter 9</a> of [<a href="bib01.xhtml#biblio09">Brown et al</a>.]. The best source for further patterns is [<a href="bib01.xhtml#biblio03">Alur et al</a>.]; most of these patterns can be used in non-Java situations. I stole the terminology on separating input and application controllers from [<a href="bib01.xhtml#biblio25">Knight and Dai</a>].<span epub:type="pagebreak" id="page_62"/></p>&#13;
</div></body>
</html>